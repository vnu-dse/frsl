import ecore : 'http://www.eclipse.org/emf/2002/Ecore';

package tutorial : tut = 'http://www.eclipse.org/mdt/ocl/oclinecore/tutorial'
{
	class Library
	{
		attribute name : String[1];
		property books#library : Book[*|1] { composes };
		property loans : Loan[*|1] { composes };
		property members#library : Member[*|1] { composes };
	}
	class Book
	{
		operation isAvailable() : Boolean[1]
		{
			body: loans->size() < copies;
		}
		attribute name : String[1];
		attribute copies : Integer[1];
		property library#books : Library[?];
		property loans : Loan[*|1] { derived volatile }
		{
			initial: library?.loans->select(book = self);
		}
		invariant SufficientCopies: library?.loans->select((book = self))->size() <= copies;
	}
	class Member
	{
		attribute name2 : String[1];
		property library#members : Library[?];
		property loans : Loan[*|1] { derived volatile }
		{
			initial: library?.loans->select(member = self);
		}
		property books : Book[*|1] { !unique derived volatile }
		{
			initial: loans->collect(book);
		}
		invariant AtMostTwoLoans: loans->size() <= 2;
		invariant UniqueLoans: loans->isUnique(book);
	}
	class Loan
	{
		property book : Book[1];
		property member : Member[1];
		attribute date : ecore::EDate[?];
	}
}