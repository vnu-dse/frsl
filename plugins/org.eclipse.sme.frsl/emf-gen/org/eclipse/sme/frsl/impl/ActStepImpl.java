/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.sme.frsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.sme.frsl.ActStep;
import org.eclipse.sme.frsl.Action;
import org.eclipse.sme.frsl.FrslPackage;
import org.eclipse.sme.frsl.SnapshotPattern;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Act Step</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.sme.frsl.impl.ActStepImpl#getPreSnapshot <em>Pre Snapshot</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.ActStepImpl#getPostSnapshot <em>Post Snapshot</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.ActStepImpl#getAction <em>Action</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.ActStepImpl#isIsActorStep <em>Is Actor Step</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActStepImpl extends StepImpl implements ActStep {
	/**
	 * The cached value of the '{@link #getPreSnapshot() <em>Pre Snapshot</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPreSnapshot()
	 * @generated
	 * @ordered
	 */
	protected SnapshotPattern preSnapshot;

	/**
	 * The cached value of the '{@link #getPostSnapshot() <em>Post Snapshot</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPostSnapshot()
	 * @generated
	 * @ordered
	 */
	protected SnapshotPattern postSnapshot;

	/**
	 * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAction()
	 * @generated
	 * @ordered
	 */
	protected EList<Action> action;

	/**
	 * The default value of the '{@link #isIsActorStep() <em>Is Actor Step</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsActorStep()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IS_ACTOR_STEP_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIsActorStep() <em>Is Actor Step</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsActorStep()
	 * @generated
	 * @ordered
	 */
	protected boolean isActorStep = IS_ACTOR_STEP_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActStepImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FrslPackage.Literals.ACT_STEP;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SnapshotPattern getPreSnapshot() {
		return preSnapshot;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetPreSnapshot(SnapshotPattern newPreSnapshot, NotificationChain msgs) {
		SnapshotPattern oldPreSnapshot = preSnapshot;
		preSnapshot = newPreSnapshot;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.ACT_STEP__PRE_SNAPSHOT, oldPreSnapshot, newPreSnapshot);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPreSnapshot(SnapshotPattern newPreSnapshot) {
		if (newPreSnapshot != preSnapshot) {
			NotificationChain msgs = null;
			if (preSnapshot != null)
				msgs = ((InternalEObject) preSnapshot).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ACT_STEP__PRE_SNAPSHOT, null, msgs);
			if (newPreSnapshot != null)
				msgs = ((InternalEObject) newPreSnapshot).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ACT_STEP__PRE_SNAPSHOT, null, msgs);
			msgs = basicSetPreSnapshot(newPreSnapshot, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ACT_STEP__PRE_SNAPSHOT, newPreSnapshot,
					newPreSnapshot));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SnapshotPattern getPostSnapshot() {
		return postSnapshot;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetPostSnapshot(SnapshotPattern newPostSnapshot, NotificationChain msgs) {
		SnapshotPattern oldPostSnapshot = postSnapshot;
		postSnapshot = newPostSnapshot;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.ACT_STEP__POST_SNAPSHOT, oldPostSnapshot, newPostSnapshot);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPostSnapshot(SnapshotPattern newPostSnapshot) {
		if (newPostSnapshot != postSnapshot) {
			NotificationChain msgs = null;
			if (postSnapshot != null)
				msgs = ((InternalEObject) postSnapshot).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ACT_STEP__POST_SNAPSHOT, null, msgs);
			if (newPostSnapshot != null)
				msgs = ((InternalEObject) newPostSnapshot).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ACT_STEP__POST_SNAPSHOT, null, msgs);
			msgs = basicSetPostSnapshot(newPostSnapshot, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ACT_STEP__POST_SNAPSHOT, newPostSnapshot,
					newPostSnapshot));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Action> getAction() {
		if (action == null) {
			action = new EObjectContainmentEList<Action>(Action.class, this, FrslPackage.ACT_STEP__ACTION);
		}
		return action;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isIsActorStep() {
		return isActorStep;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsActorStep(boolean newIsActorStep) {
		boolean oldIsActorStep = isActorStep;
		isActorStep = newIsActorStep;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ACT_STEP__IS_ACTOR_STEP, oldIsActorStep,
					isActorStep));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.ACT_STEP__PRE_SNAPSHOT:
			return basicSetPreSnapshot(null, msgs);
		case FrslPackage.ACT_STEP__POST_SNAPSHOT:
			return basicSetPostSnapshot(null, msgs);
		case FrslPackage.ACT_STEP__ACTION:
			return ((InternalEList<?>) getAction()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FrslPackage.ACT_STEP__PRE_SNAPSHOT:
			return getPreSnapshot();
		case FrslPackage.ACT_STEP__POST_SNAPSHOT:
			return getPostSnapshot();
		case FrslPackage.ACT_STEP__ACTION:
			return getAction();
		case FrslPackage.ACT_STEP__IS_ACTOR_STEP:
			return isIsActorStep();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FrslPackage.ACT_STEP__PRE_SNAPSHOT:
			setPreSnapshot((SnapshotPattern) newValue);
			return;
		case FrslPackage.ACT_STEP__POST_SNAPSHOT:
			setPostSnapshot((SnapshotPattern) newValue);
			return;
		case FrslPackage.ACT_STEP__ACTION:
			getAction().clear();
			getAction().addAll((Collection<? extends Action>) newValue);
			return;
		case FrslPackage.ACT_STEP__IS_ACTOR_STEP:
			setIsActorStep((Boolean) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FrslPackage.ACT_STEP__PRE_SNAPSHOT:
			setPreSnapshot((SnapshotPattern) null);
			return;
		case FrslPackage.ACT_STEP__POST_SNAPSHOT:
			setPostSnapshot((SnapshotPattern) null);
			return;
		case FrslPackage.ACT_STEP__ACTION:
			getAction().clear();
			return;
		case FrslPackage.ACT_STEP__IS_ACTOR_STEP:
			setIsActorStep(IS_ACTOR_STEP_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FrslPackage.ACT_STEP__PRE_SNAPSHOT:
			return preSnapshot != null;
		case FrslPackage.ACT_STEP__POST_SNAPSHOT:
			return postSnapshot != null;
		case FrslPackage.ACT_STEP__ACTION:
			return action != null && !action.isEmpty();
		case FrslPackage.ACT_STEP__IS_ACTOR_STEP:
			return isActorStep != IS_ACTOR_STEP_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (isActorStep: ");
		result.append(isActorStep);
		result.append(')');
		return result.toString();
	}

} //ActStepImpl
