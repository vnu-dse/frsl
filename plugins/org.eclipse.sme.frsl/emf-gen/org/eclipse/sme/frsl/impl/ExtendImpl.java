/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.sme.frsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.sme.frsl.Extend;
import org.eclipse.sme.frsl.ExtensionPoint;
import org.eclipse.sme.frsl.FrslPackage;
import org.eclipse.sme.frsl.Usecase;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Extend</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.sme.frsl.impl.ExtendImpl#getExtendedUC <em>Extended UC</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.ExtendImpl#getExtension <em>Extension</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.ExtendImpl#getExtPoint <em>Ext Point</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExtendImpl extends MinimalEObjectImpl.Container implements Extend {
	/**
	 * The cached value of the '{@link #getExtendedUC() <em>Extended UC</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExtendedUC()
	 * @generated
	 * @ordered
	 */
	protected Usecase extendedUC;

	/**
	 * The cached value of the '{@link #getExtension() <em>Extension</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExtension()
	 * @generated
	 * @ordered
	 */
	protected Usecase extension;

	/**
	 * The cached value of the '{@link #getExtPoint() <em>Ext Point</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExtPoint()
	 * @generated
	 * @ordered
	 */
	protected EList<ExtensionPoint> extPoint;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FrslPackage.Literals.EXTEND;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Usecase getExtendedUC() {
		if (extendedUC != null && extendedUC.eIsProxy()) {
			InternalEObject oldExtendedUC = (InternalEObject) extendedUC;
			extendedUC = (Usecase) eResolveProxy(oldExtendedUC);
			if (extendedUC != oldExtendedUC) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, FrslPackage.EXTEND__EXTENDED_UC,
							oldExtendedUC, extendedUC));
			}
		}
		return extendedUC;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Usecase basicGetExtendedUC() {
		return extendedUC;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setExtendedUC(Usecase newExtendedUC) {
		Usecase oldExtendedUC = extendedUC;
		extendedUC = newExtendedUC;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.EXTEND__EXTENDED_UC, oldExtendedUC,
					extendedUC));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Usecase getExtension() {
		if (extension != null && extension.eIsProxy()) {
			InternalEObject oldExtension = (InternalEObject) extension;
			extension = (Usecase) eResolveProxy(oldExtension);
			if (extension != oldExtension) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, FrslPackage.EXTEND__EXTENSION,
							oldExtension, extension));
			}
		}
		return extension;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Usecase basicGetExtension() {
		return extension;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setExtension(Usecase newExtension) {
		Usecase oldExtension = extension;
		extension = newExtension;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.EXTEND__EXTENSION, oldExtension,
					extension));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<ExtensionPoint> getExtPoint() {
		if (extPoint == null) {
			extPoint = new EObjectWithInverseResolvingEList.ManyInverse<ExtensionPoint>(ExtensionPoint.class, this,
					FrslPackage.EXTEND__EXT_POINT, FrslPackage.EXTENSION_POINT__EXTEND);
		}
		return extPoint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.EXTEND__EXT_POINT:
			return ((InternalEList<InternalEObject>) (InternalEList<?>) getExtPoint()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.EXTEND__EXT_POINT:
			return ((InternalEList<?>) getExtPoint()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FrslPackage.EXTEND__EXTENDED_UC:
			if (resolve)
				return getExtendedUC();
			return basicGetExtendedUC();
		case FrslPackage.EXTEND__EXTENSION:
			if (resolve)
				return getExtension();
			return basicGetExtension();
		case FrslPackage.EXTEND__EXT_POINT:
			return getExtPoint();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FrslPackage.EXTEND__EXTENDED_UC:
			setExtendedUC((Usecase) newValue);
			return;
		case FrslPackage.EXTEND__EXTENSION:
			setExtension((Usecase) newValue);
			return;
		case FrslPackage.EXTEND__EXT_POINT:
			getExtPoint().clear();
			getExtPoint().addAll((Collection<? extends ExtensionPoint>) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FrslPackage.EXTEND__EXTENDED_UC:
			setExtendedUC((Usecase) null);
			return;
		case FrslPackage.EXTEND__EXTENSION:
			setExtension((Usecase) null);
			return;
		case FrslPackage.EXTEND__EXT_POINT:
			getExtPoint().clear();
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FrslPackage.EXTEND__EXTENDED_UC:
			return extendedUC != null;
		case FrslPackage.EXTEND__EXTENSION:
			return extension != null;
		case FrslPackage.EXTEND__EXT_POINT:
			return extPoint != null && !extPoint.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //ExtendImpl
