/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.sme.frsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.sme.frsl.FrslPackage;
import org.eclipse.sme.frsl.RejoinStep;
import org.eclipse.sme.frsl.SnapshotPattern;
import org.eclipse.sme.frsl.Step;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rejoin Step</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.sme.frsl.impl.RejoinStepImpl#getRejoinTo <em>Rejoin To</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.RejoinStepImpl#getCondition <em>Condition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RejoinStepImpl extends StepImpl implements RejoinStep {
	/**
	 * The cached value of the '{@link #getRejoinTo() <em>Rejoin To</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRejoinTo()
	 * @generated
	 * @ordered
	 */
	protected Step rejoinTo;

	/**
	 * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCondition()
	 * @generated
	 * @ordered
	 */
	protected SnapshotPattern condition;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RejoinStepImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FrslPackage.Literals.REJOIN_STEP;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Step getRejoinTo() {
		if (rejoinTo != null && rejoinTo.eIsProxy()) {
			InternalEObject oldRejoinTo = (InternalEObject) rejoinTo;
			rejoinTo = (Step) eResolveProxy(oldRejoinTo);
			if (rejoinTo != oldRejoinTo) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, FrslPackage.REJOIN_STEP__REJOIN_TO,
							oldRejoinTo, rejoinTo));
			}
		}
		return rejoinTo;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Step basicGetRejoinTo() {
		return rejoinTo;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetRejoinTo(Step newRejoinTo, NotificationChain msgs) {
		Step oldRejoinTo = rejoinTo;
		rejoinTo = newRejoinTo;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.REJOIN_STEP__REJOIN_TO, oldRejoinTo, newRejoinTo);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setRejoinTo(Step newRejoinTo) {
		if (newRejoinTo != rejoinTo) {
			NotificationChain msgs = null;
			if (rejoinTo != null)
				msgs = ((InternalEObject) rejoinTo).eInverseRemove(this, FrslPackage.STEP__REJOIN_FROM, Step.class,
						msgs);
			if (newRejoinTo != null)
				msgs = ((InternalEObject) newRejoinTo).eInverseAdd(this, FrslPackage.STEP__REJOIN_FROM, Step.class,
						msgs);
			msgs = basicSetRejoinTo(newRejoinTo, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.REJOIN_STEP__REJOIN_TO, newRejoinTo,
					newRejoinTo));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SnapshotPattern getCondition() {
		return condition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetCondition(SnapshotPattern newCondition, NotificationChain msgs) {
		SnapshotPattern oldCondition = condition;
		condition = newCondition;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.REJOIN_STEP__CONDITION, oldCondition, newCondition);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCondition(SnapshotPattern newCondition) {
		if (newCondition != condition) {
			NotificationChain msgs = null;
			if (condition != null)
				msgs = ((InternalEObject) condition).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.REJOIN_STEP__CONDITION, null, msgs);
			if (newCondition != null)
				msgs = ((InternalEObject) newCondition).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.REJOIN_STEP__CONDITION, null, msgs);
			msgs = basicSetCondition(newCondition, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.REJOIN_STEP__CONDITION, newCondition,
					newCondition));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.REJOIN_STEP__REJOIN_TO:
			if (rejoinTo != null)
				msgs = ((InternalEObject) rejoinTo).eInverseRemove(this, FrslPackage.STEP__REJOIN_FROM, Step.class,
						msgs);
			return basicSetRejoinTo((Step) otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.REJOIN_STEP__REJOIN_TO:
			return basicSetRejoinTo(null, msgs);
		case FrslPackage.REJOIN_STEP__CONDITION:
			return basicSetCondition(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FrslPackage.REJOIN_STEP__REJOIN_TO:
			if (resolve)
				return getRejoinTo();
			return basicGetRejoinTo();
		case FrslPackage.REJOIN_STEP__CONDITION:
			return getCondition();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FrslPackage.REJOIN_STEP__REJOIN_TO:
			setRejoinTo((Step) newValue);
			return;
		case FrslPackage.REJOIN_STEP__CONDITION:
			setCondition((SnapshotPattern) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FrslPackage.REJOIN_STEP__REJOIN_TO:
			setRejoinTo((Step) null);
			return;
		case FrslPackage.REJOIN_STEP__CONDITION:
			setCondition((SnapshotPattern) null);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FrslPackage.REJOIN_STEP__REJOIN_TO:
			return rejoinTo != null;
		case FrslPackage.REJOIN_STEP__CONDITION:
			return condition != null;
		}
		return super.eIsSet(featureID);
	}

} //RejoinStepImpl
