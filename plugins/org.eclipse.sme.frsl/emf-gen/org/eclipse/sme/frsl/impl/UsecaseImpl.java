/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.sme.frsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.sme.frsl.Actor;
import org.eclipse.sme.frsl.ExtensionPoint;
import org.eclipse.sme.frsl.FrslPackage;
import org.eclipse.sme.frsl.Include;
import org.eclipse.sme.frsl.Step;
import org.eclipse.sme.frsl.Usecase;
import org.eclipse.sme.frsl.UsecasePostcondition;
import org.eclipse.sme.frsl.UsecasePrecondition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Usecase</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getPrimaryActor <em>Primary Actor</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getSecondaryActor <em>Secondary Actor</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getPrecondition <em>Precondition</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getPostcondition <em>Postcondition</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getFirstStep <em>First Step</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getExtPoint <em>Ext Point</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.UsecaseImpl#getInclude <em>Include</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UsecaseImpl extends MinimalEObjectImpl.Container implements Usecase {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDescription()
	 * @generated
	 * @ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDescription()
	 * @generated
	 * @ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
	 * The cached value of the '{@link #getPrimaryActor() <em>Primary Actor</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPrimaryActor()
	 * @generated
	 * @ordered
	 */
	protected Actor primaryActor;

	/**
	 * The cached value of the '{@link #getSecondaryActor() <em>Secondary Actor</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSecondaryActor()
	 * @generated
	 * @ordered
	 */
	protected EList<Actor> secondaryActor;

	/**
	 * The cached value of the '{@link #getPrecondition() <em>Precondition</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPrecondition()
	 * @generated
	 * @ordered
	 */
	protected UsecasePrecondition precondition;

	/**
	 * The cached value of the '{@link #getPostcondition() <em>Postcondition</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPostcondition()
	 * @generated
	 * @ordered
	 */
	protected UsecasePostcondition postcondition;

	/**
	 * The cached value of the '{@link #getFirstStep() <em>First Step</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFirstStep()
	 * @generated
	 * @ordered
	 */
	protected Step firstStep;

	/**
	 * The cached value of the '{@link #getExtPoint() <em>Ext Point</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExtPoint()
	 * @generated
	 * @ordered
	 */
	protected EList<ExtensionPoint> extPoint;

	/**
	 * The cached value of the '{@link #getInclude() <em>Include</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getInclude()
	 * @generated
	 * @ordered
	 */
	protected EList<Include> include;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsecaseImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FrslPackage.Literals.USECASE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.USECASE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getDescription() {
		return description;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.USECASE__DESCRIPTION, oldDescription,
					description));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Actor getPrimaryActor() {
		if (primaryActor != null && primaryActor.eIsProxy()) {
			InternalEObject oldPrimaryActor = (InternalEObject) primaryActor;
			primaryActor = (Actor) eResolveProxy(oldPrimaryActor);
			if (primaryActor != oldPrimaryActor) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, FrslPackage.USECASE__PRIMARY_ACTOR,
							oldPrimaryActor, primaryActor));
			}
		}
		return primaryActor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Actor basicGetPrimaryActor() {
		return primaryActor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPrimaryActor(Actor newPrimaryActor) {
		Actor oldPrimaryActor = primaryActor;
		primaryActor = newPrimaryActor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.USECASE__PRIMARY_ACTOR, oldPrimaryActor,
					primaryActor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Actor> getSecondaryActor() {
		if (secondaryActor == null) {
			secondaryActor = new EObjectResolvingEList<Actor>(Actor.class, this, FrslPackage.USECASE__SECONDARY_ACTOR);
		}
		return secondaryActor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public UsecasePrecondition getPrecondition() {
		return precondition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetPrecondition(UsecasePrecondition newPrecondition, NotificationChain msgs) {
		UsecasePrecondition oldPrecondition = precondition;
		precondition = newPrecondition;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.USECASE__PRECONDITION, oldPrecondition, newPrecondition);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPrecondition(UsecasePrecondition newPrecondition) {
		if (newPrecondition != precondition) {
			NotificationChain msgs = null;
			if (precondition != null)
				msgs = ((InternalEObject) precondition).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.USECASE__PRECONDITION, null, msgs);
			if (newPrecondition != null)
				msgs = ((InternalEObject) newPrecondition).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.USECASE__PRECONDITION, null, msgs);
			msgs = basicSetPrecondition(newPrecondition, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.USECASE__PRECONDITION, newPrecondition,
					newPrecondition));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public UsecasePostcondition getPostcondition() {
		return postcondition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetPostcondition(UsecasePostcondition newPostcondition, NotificationChain msgs) {
		UsecasePostcondition oldPostcondition = postcondition;
		postcondition = newPostcondition;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.USECASE__POSTCONDITION, oldPostcondition, newPostcondition);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPostcondition(UsecasePostcondition newPostcondition) {
		if (newPostcondition != postcondition) {
			NotificationChain msgs = null;
			if (postcondition != null)
				msgs = ((InternalEObject) postcondition).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.USECASE__POSTCONDITION, null, msgs);
			if (newPostcondition != null)
				msgs = ((InternalEObject) newPostcondition).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.USECASE__POSTCONDITION, null, msgs);
			msgs = basicSetPostcondition(newPostcondition, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.USECASE__POSTCONDITION, newPostcondition,
					newPostcondition));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Step getFirstStep() {
		return firstStep;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetFirstStep(Step newFirstStep, NotificationChain msgs) {
		Step oldFirstStep = firstStep;
		firstStep = newFirstStep;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.USECASE__FIRST_STEP, oldFirstStep, newFirstStep);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setFirstStep(Step newFirstStep) {
		if (newFirstStep != firstStep) {
			NotificationChain msgs = null;
			if (firstStep != null)
				msgs = ((InternalEObject) firstStep).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.USECASE__FIRST_STEP, null, msgs);
			if (newFirstStep != null)
				msgs = ((InternalEObject) newFirstStep).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.USECASE__FIRST_STEP, null, msgs);
			msgs = basicSetFirstStep(newFirstStep, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.USECASE__FIRST_STEP, newFirstStep,
					newFirstStep));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<ExtensionPoint> getExtPoint() {
		if (extPoint == null) {
			extPoint = new EObjectContainmentEList<ExtensionPoint>(ExtensionPoint.class, this,
					FrslPackage.USECASE__EXT_POINT);
		}
		return extPoint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Include> getInclude() {
		if (include == null) {
			include = new EObjectContainmentWithInverseEList<Include>(Include.class, this, FrslPackage.USECASE__INCLUDE,
					FrslPackage.INCLUDE__INCLUDING_UC);
		}
		return include;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.USECASE__INCLUDE:
			return ((InternalEList<InternalEObject>) (InternalEList<?>) getInclude()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.USECASE__PRECONDITION:
			return basicSetPrecondition(null, msgs);
		case FrslPackage.USECASE__POSTCONDITION:
			return basicSetPostcondition(null, msgs);
		case FrslPackage.USECASE__FIRST_STEP:
			return basicSetFirstStep(null, msgs);
		case FrslPackage.USECASE__EXT_POINT:
			return ((InternalEList<?>) getExtPoint()).basicRemove(otherEnd, msgs);
		case FrslPackage.USECASE__INCLUDE:
			return ((InternalEList<?>) getInclude()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FrslPackage.USECASE__NAME:
			return getName();
		case FrslPackage.USECASE__DESCRIPTION:
			return getDescription();
		case FrslPackage.USECASE__PRIMARY_ACTOR:
			if (resolve)
				return getPrimaryActor();
			return basicGetPrimaryActor();
		case FrslPackage.USECASE__SECONDARY_ACTOR:
			return getSecondaryActor();
		case FrslPackage.USECASE__PRECONDITION:
			return getPrecondition();
		case FrslPackage.USECASE__POSTCONDITION:
			return getPostcondition();
		case FrslPackage.USECASE__FIRST_STEP:
			return getFirstStep();
		case FrslPackage.USECASE__EXT_POINT:
			return getExtPoint();
		case FrslPackage.USECASE__INCLUDE:
			return getInclude();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FrslPackage.USECASE__NAME:
			setName((String) newValue);
			return;
		case FrslPackage.USECASE__DESCRIPTION:
			setDescription((String) newValue);
			return;
		case FrslPackage.USECASE__PRIMARY_ACTOR:
			setPrimaryActor((Actor) newValue);
			return;
		case FrslPackage.USECASE__SECONDARY_ACTOR:
			getSecondaryActor().clear();
			getSecondaryActor().addAll((Collection<? extends Actor>) newValue);
			return;
		case FrslPackage.USECASE__PRECONDITION:
			setPrecondition((UsecasePrecondition) newValue);
			return;
		case FrslPackage.USECASE__POSTCONDITION:
			setPostcondition((UsecasePostcondition) newValue);
			return;
		case FrslPackage.USECASE__FIRST_STEP:
			setFirstStep((Step) newValue);
			return;
		case FrslPackage.USECASE__EXT_POINT:
			getExtPoint().clear();
			getExtPoint().addAll((Collection<? extends ExtensionPoint>) newValue);
			return;
		case FrslPackage.USECASE__INCLUDE:
			getInclude().clear();
			getInclude().addAll((Collection<? extends Include>) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FrslPackage.USECASE__NAME:
			setName(NAME_EDEFAULT);
			return;
		case FrslPackage.USECASE__DESCRIPTION:
			setDescription(DESCRIPTION_EDEFAULT);
			return;
		case FrslPackage.USECASE__PRIMARY_ACTOR:
			setPrimaryActor((Actor) null);
			return;
		case FrslPackage.USECASE__SECONDARY_ACTOR:
			getSecondaryActor().clear();
			return;
		case FrslPackage.USECASE__PRECONDITION:
			setPrecondition((UsecasePrecondition) null);
			return;
		case FrslPackage.USECASE__POSTCONDITION:
			setPostcondition((UsecasePostcondition) null);
			return;
		case FrslPackage.USECASE__FIRST_STEP:
			setFirstStep((Step) null);
			return;
		case FrslPackage.USECASE__EXT_POINT:
			getExtPoint().clear();
			return;
		case FrslPackage.USECASE__INCLUDE:
			getInclude().clear();
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FrslPackage.USECASE__NAME:
			return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
		case FrslPackage.USECASE__DESCRIPTION:
			return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
		case FrslPackage.USECASE__PRIMARY_ACTOR:
			return primaryActor != null;
		case FrslPackage.USECASE__SECONDARY_ACTOR:
			return secondaryActor != null && !secondaryActor.isEmpty();
		case FrslPackage.USECASE__PRECONDITION:
			return precondition != null;
		case FrslPackage.USECASE__POSTCONDITION:
			return postcondition != null;
		case FrslPackage.USECASE__FIRST_STEP:
			return firstStep != null;
		case FrslPackage.USECASE__EXT_POINT:
			return extPoint != null && !extPoint.isEmpty();
		case FrslPackage.USECASE__INCLUDE:
			return include != null && !include.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", description: ");
		result.append(description);
		result.append(')');
		return result.toString();
	}

} //UsecaseImpl
