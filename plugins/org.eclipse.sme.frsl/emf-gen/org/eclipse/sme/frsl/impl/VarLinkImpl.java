/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.sme.frsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.eclipse.ocl.pivot.AssociationClass;
import org.eclipse.sme.frsl.FrslPackage;
import org.eclipse.sme.frsl.ObjVar;
import org.eclipse.sme.frsl.VarLink;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Var Link</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.sme.frsl.impl.VarLinkImpl#getObjVar <em>Obj Var</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.VarLinkImpl#getAssoc <em>Assoc</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.VarLinkImpl#isIsNeg <em>Is Neg</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VarLinkImpl extends MinimalEObjectImpl.Container implements VarLink {
	/**
	 * The cached value of the '{@link #getObjVar() <em>Obj Var</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getObjVar()
	 * @generated
	 * @ordered
	 */
	protected EList<ObjVar> objVar;

	/**
	 * The cached value of the '{@link #getAssoc() <em>Assoc</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAssoc()
	 * @generated
	 * @ordered
	 */
	protected AssociationClass assoc;

	/**
	 * The default value of the '{@link #isIsNeg() <em>Is Neg</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsNeg()
	 * @generated
	 * @ordered
	 */
	protected static final boolean IS_NEG_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isIsNeg() <em>Is Neg</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isIsNeg()
	 * @generated
	 * @ordered
	 */
	protected boolean isNeg = IS_NEG_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarLinkImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FrslPackage.Literals.VAR_LINK;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<ObjVar> getObjVar() {
		if (objVar == null) {
			objVar = new EObjectResolvingEList<ObjVar>(ObjVar.class, this, FrslPackage.VAR_LINK__OBJ_VAR);
		}
		return objVar;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public AssociationClass getAssoc() {
		if (assoc != null && assoc.eIsProxy()) {
			InternalEObject oldAssoc = (InternalEObject) assoc;
			assoc = (AssociationClass) eResolveProxy(oldAssoc);
			if (assoc != oldAssoc) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, FrslPackage.VAR_LINK__ASSOC, oldAssoc,
							assoc));
			}
		}
		return assoc;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AssociationClass basicGetAssoc() {
		return assoc;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAssoc(AssociationClass newAssoc) {
		AssociationClass oldAssoc = assoc;
		assoc = newAssoc;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.VAR_LINK__ASSOC, oldAssoc, assoc));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isIsNeg() {
		return isNeg;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIsNeg(boolean newIsNeg) {
		boolean oldIsNeg = isNeg;
		isNeg = newIsNeg;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.VAR_LINK__IS_NEG, oldIsNeg, isNeg));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FrslPackage.VAR_LINK__OBJ_VAR:
			return getObjVar();
		case FrslPackage.VAR_LINK__ASSOC:
			if (resolve)
				return getAssoc();
			return basicGetAssoc();
		case FrslPackage.VAR_LINK__IS_NEG:
			return isIsNeg();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FrslPackage.VAR_LINK__OBJ_VAR:
			getObjVar().clear();
			getObjVar().addAll((Collection<? extends ObjVar>) newValue);
			return;
		case FrslPackage.VAR_LINK__ASSOC:
			setAssoc((AssociationClass) newValue);
			return;
		case FrslPackage.VAR_LINK__IS_NEG:
			setIsNeg((Boolean) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FrslPackage.VAR_LINK__OBJ_VAR:
			getObjVar().clear();
			return;
		case FrslPackage.VAR_LINK__ASSOC:
			setAssoc((AssociationClass) null);
			return;
		case FrslPackage.VAR_LINK__IS_NEG:
			setIsNeg(IS_NEG_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FrslPackage.VAR_LINK__OBJ_VAR:
			return objVar != null && !objVar.isEmpty();
		case FrslPackage.VAR_LINK__ASSOC:
			return assoc != null;
		case FrslPackage.VAR_LINK__IS_NEG:
			return isNeg != IS_NEG_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (isNeg: ");
		result.append(isNeg);
		result.append(')');
		return result.toString();
	}

} //VarLinkImpl
