/**
 * generated by Xtext 2.25.0
 */
package org.eclipse.sme.frsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.sme.frsl.AltFlow;
import org.eclipse.sme.frsl.FrslPackage;
import org.eclipse.sme.frsl.SnapshotPattern;
import org.eclipse.sme.frsl.Step;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt Flow</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.sme.frsl.impl.AltFlowImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.AltFlowImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.AltFlowImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.AltFlowImpl#getBaseStep <em>Base Step</em>}</li>
 *   <li>{@link org.eclipse.sme.frsl.impl.AltFlowImpl#getAltStep <em>Alt Step</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AltFlowImpl extends MinimalEObjectImpl.Container implements AltFlow {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDescription()
	 * @generated
	 * @ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDescription()
	 * @generated
	 * @ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
	 * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCondition()
	 * @generated
	 * @ordered
	 */
	protected SnapshotPattern condition;

	/**
	 * The cached value of the '{@link #getAltStep() <em>Alt Step</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAltStep()
	 * @generated
	 * @ordered
	 */
	protected Step altStep;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltFlowImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return FrslPackage.Literals.ALT_FLOW;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ALT_FLOW__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getDescription() {
		return description;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ALT_FLOW__DESCRIPTION, oldDescription,
					description));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public SnapshotPattern getCondition() {
		return condition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetCondition(SnapshotPattern newCondition, NotificationChain msgs) {
		SnapshotPattern oldCondition = condition;
		condition = newCondition;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.ALT_FLOW__CONDITION, oldCondition, newCondition);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCondition(SnapshotPattern newCondition) {
		if (newCondition != condition) {
			NotificationChain msgs = null;
			if (condition != null)
				msgs = ((InternalEObject) condition).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ALT_FLOW__CONDITION, null, msgs);
			if (newCondition != null)
				msgs = ((InternalEObject) newCondition).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ALT_FLOW__CONDITION, null, msgs);
			msgs = basicSetCondition(newCondition, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ALT_FLOW__CONDITION, newCondition,
					newCondition));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Step getBaseStep() {
		if (eContainerFeatureID() != FrslPackage.ALT_FLOW__BASE_STEP)
			return null;
		return (Step) eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetBaseStep(Step newBaseStep, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject) newBaseStep, FrslPackage.ALT_FLOW__BASE_STEP, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setBaseStep(Step newBaseStep) {
		if (newBaseStep != eInternalContainer()
				|| (eContainerFeatureID() != FrslPackage.ALT_FLOW__BASE_STEP && newBaseStep != null)) {
			if (EcoreUtil.isAncestor(this, newBaseStep))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newBaseStep != null)
				msgs = ((InternalEObject) newBaseStep).eInverseAdd(this, FrslPackage.STEP__ALT_FLOW, Step.class, msgs);
			msgs = basicSetBaseStep(newBaseStep, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ALT_FLOW__BASE_STEP, newBaseStep,
					newBaseStep));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Step getAltStep() {
		return altStep;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetAltStep(Step newAltStep, NotificationChain msgs) {
		Step oldAltStep = altStep;
		altStep = newAltStep;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET,
					FrslPackage.ALT_FLOW__ALT_STEP, oldAltStep, newAltStep);
			if (msgs == null)
				msgs = notification;
			else
				msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAltStep(Step newAltStep) {
		if (newAltStep != altStep) {
			NotificationChain msgs = null;
			if (altStep != null)
				msgs = ((InternalEObject) altStep).eInverseRemove(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ALT_FLOW__ALT_STEP, null, msgs);
			if (newAltStep != null)
				msgs = ((InternalEObject) newAltStep).eInverseAdd(this,
						EOPPOSITE_FEATURE_BASE - FrslPackage.ALT_FLOW__ALT_STEP, null, msgs);
			msgs = basicSetAltStep(newAltStep, msgs);
			if (msgs != null)
				msgs.dispatch();
		} else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, FrslPackage.ALT_FLOW__ALT_STEP, newAltStep,
					newAltStep));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.ALT_FLOW__BASE_STEP:
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			return basicSetBaseStep((Step) otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case FrslPackage.ALT_FLOW__CONDITION:
			return basicSetCondition(null, msgs);
		case FrslPackage.ALT_FLOW__BASE_STEP:
			return basicSetBaseStep(null, msgs);
		case FrslPackage.ALT_FLOW__ALT_STEP:
			return basicSetAltStep(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
		case FrslPackage.ALT_FLOW__BASE_STEP:
			return eInternalContainer().eInverseRemove(this, FrslPackage.STEP__ALT_FLOW, Step.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case FrslPackage.ALT_FLOW__NAME:
			return getName();
		case FrslPackage.ALT_FLOW__DESCRIPTION:
			return getDescription();
		case FrslPackage.ALT_FLOW__CONDITION:
			return getCondition();
		case FrslPackage.ALT_FLOW__BASE_STEP:
			return getBaseStep();
		case FrslPackage.ALT_FLOW__ALT_STEP:
			return getAltStep();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case FrslPackage.ALT_FLOW__NAME:
			setName((String) newValue);
			return;
		case FrslPackage.ALT_FLOW__DESCRIPTION:
			setDescription((String) newValue);
			return;
		case FrslPackage.ALT_FLOW__CONDITION:
			setCondition((SnapshotPattern) newValue);
			return;
		case FrslPackage.ALT_FLOW__BASE_STEP:
			setBaseStep((Step) newValue);
			return;
		case FrslPackage.ALT_FLOW__ALT_STEP:
			setAltStep((Step) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case FrslPackage.ALT_FLOW__NAME:
			setName(NAME_EDEFAULT);
			return;
		case FrslPackage.ALT_FLOW__DESCRIPTION:
			setDescription(DESCRIPTION_EDEFAULT);
			return;
		case FrslPackage.ALT_FLOW__CONDITION:
			setCondition((SnapshotPattern) null);
			return;
		case FrslPackage.ALT_FLOW__BASE_STEP:
			setBaseStep((Step) null);
			return;
		case FrslPackage.ALT_FLOW__ALT_STEP:
			setAltStep((Step) null);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case FrslPackage.ALT_FLOW__NAME:
			return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
		case FrslPackage.ALT_FLOW__DESCRIPTION:
			return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
		case FrslPackage.ALT_FLOW__CONDITION:
			return condition != null;
		case FrslPackage.ALT_FLOW__BASE_STEP:
			return getBaseStep() != null;
		case FrslPackage.ALT_FLOW__ALT_STEP:
			return altStep != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", description: ");
		result.append(description);
		result.append(')');
		return result.toString();
	}

} //AltFlowImpl
